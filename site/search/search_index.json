{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PowerAPI","text":"<p>The goal of this projet is to provide a set of tools to go forward a greener computing. The idea is to provide software-defined PowerMeters to mesure the power consumption of programs. The core of this project is the PowerAPI toolkit for building such PowerMeters.</p> <p>Geting started  GitHub</p>"},{"location":"#software-powermeters","title":"Software PowerMeters","text":"<p>A software PowerMeter is an application built with the PowerAPI components that can measure the power consumption of software running on a single machine or on a cluster of machine.</p> <p>The Figure below depicts the global architecture of a software PowerMeter in PowerAPI. </p> <p>A PowerMeter has two components, a Sensor and a Formula, used to produce an estimation of the power consumption of a monitored software.</p>"},{"location":"#sensor","title":"Sensor","text":"<p>The Sensor is an independent software that collects raw data (metrics) correlated with the power consumption of the monitored software.</p> <p>Data are collected by querying the hardware\u2019s machine that hosts the monitored software. The sensor must be executed on the same machine as the monitored software. The data are collected throughout the duration of the software. For this reason, the sensor must operate in parallel.</p> <p>Collected raw data are stored in an external Source to make the data available to the Formula. This Source may be hosted on an other machine.</p>"},{"location":"#usage","title":"Usage","text":"<p>Because they collect from different hardware, each Sensor is very different from one another. Currently, PowerAPI proposes two Sensors: RALPL and Procfs. Refer to each Sensor documentation to know how to use them.</p>"},{"location":"#formula","title":"Formula","text":"<p>A Formula is a computational module that computes an estimation of the power consumption of monitored software from the data collected by the sensor.</p> <p>A Formula has two working modes:</p> <ul> <li> <p><code>stream</code> mode where the Formula read the data from the Sensor as they are   produced (in realtime).</p> </li> <li> <p><code>post-mortem</code> mode where the Formula analyses the data already collected by the Sensor in a past monitoring phase.</p> </li> </ul>"},{"location":"#usage_1","title":"Usage","text":"<p>Currently, there are two Formulas: RAPL and SmartWatts. Refer to each Formula documentation to know how to use them.</p>"},{"location":"#consortium","title":"Consortium","text":""},{"location":"#mailing-list","title":"Mailing list","text":"<p>You can follow the latest news and asks questions by subscribing to our mailing list.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>If you would like to contribute code you can do so through our Github repository by forking it and sending a pull request.</p> <p>You should start by reading the contribution guide</p>"},{"location":"credits_licence/","title":"Credits and Licence","text":"<p>PowerAPI is an open-source project developed by the Spirals research group, University of Lille and Inria</p> <p>This software is licensed under the BSD 3-Clause License, quoted below.</p> <p>BSD 3-Clause License</p> <p>Copyright (c) 2021, INRIA87801. *1/ Copyright (c) 2021, University of Lille All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li> <p>Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its   contributors may be used to endorse or promote products derived from   this software without specific prior written permission.</p> </li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"getting_started/","title":"Getting started","text":"<p>If you want to monitor the energy consumption of your process we have some ready-to-use tools</p>"},{"location":"getting_started/#formulas","title":"Formulas","text":"Source and Destination <p>In order to use any Formula, you need to run a Source and a Destination. The former is used by a Sensor to store metrics. The later allows the Formula to make avaiable the estimations. For starting, you can use MongoDB as Source and InfluxDB:1.8 as Destination by installing them as Docker containers. For more details about Sources and Destinations please check this section</p>"},{"location":"getting_started/#rapl-formula","title":"RAPL Formula","text":"<p>for monitoring the energy consumption of your device</p> <p>RAPL Formula is made for tracking the energy consumption of your machine. To install RAPL Formula on a baremetal server or a PC run the following script in a Terminal.</p> <p>The script explains what it will do and then pauses before it does it.</p> <p>Please notice that you need a Linux distribution in order to use the HWPC Sensor installed by the script as well as a comptible Intel or AMD Processor. HWPC Sensor will not work on a Virtual Machine. Howerver, you can install the Formula by hand in a Virtual Machine if need it.</p>"},{"location":"getting_started/#smartwatts-formula","title":"SmartWatts Formula","text":"<p>for monitoring the energy consumption of your process</p> <p>Smartwatts is made for tracking the energy consumption of processes on a machine. To install smartwatts on a baremetal server or a PC run the following script in a Terminal.</p> <p>The script explains what it will do and then pauses before it does it.</p> <p>Please notice that you need a Linux distribution in order to use the HWPC Sensor installed by the script as well as a comptible Intel or AMD Processor. HWPC Sensor will not work on a Virtual Machine. Howerver, you can install the Formula by hand in a Virtual Machine if need it.</p>"},{"location":"getting_started/#cgroups","title":"CGroups","text":"<p>If you need to monitor a process or a group of process via SmartWatts, please follow this guide. Please notice that cgroup V1 is required for HWPC Sensor. If you need to enable this <code>cgroup</code> version please follow this guide.    </p>"},{"location":"getting_started/#jouleit","title":"Jouleit","text":"<p>for mesuring the energy consumption of a program</p> <p>Jouleit is made for tracking the energy consumption of a program. Jouleit need <code>gawk</code> to run. You can get the script from the github repository Start jouleit by using <code>./jouleit.sh cmd</code>.</p>"},{"location":"publications/","title":"Publications","text":"<ul> <li>The Next 700 CPU Power Models: M. Colmant, R. Rouvoy, M. Kurpicz, A. Sobe, P. Felber, L. Seinturier. Elsevier Journal of Systems and Software (JSS). 144(10):382-396, Elsevier.</li> <li>WattsKit: Software-Defined Power Monitoring of Distributed Systems: M. Colmant, P. Felber, R. Rouvoy, L. Seinturier. IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing (CCGrid). April 2017, Spain, France. pp.1-14.</li> <li>Process-level Power Estimation in VM-based Systems: M. Colmant, M. Kurpicz, L. Huertas, R. Rouvoy, P. Felber, A. Sobe. European Conference on Computer Systems (EuroSys). April 2015, Bordeaux, France. pp.1-14.</li> <li>Monitoring Energy Hotspots in Software: A. Noureddine, R. Rouvoy, L. Seinturier. Journal of Automated Software Engineering, Springer, 2015, pp.1-42.</li> <li>Unit Testing of Energy Consumption of Software Libraries: A. Noureddine, R. Rouvoy, L. Seinturier. International Symposium On Applied Computing (SAC), March 2014, Gyeongju, South Korea. pp.1200-1205.</li> <li>Informatique : Des logiciels mis au vert: L. Seinturier, R. Rouvoy. J'innove en Nord Pas de Calais, NFID, 2013.</li> <li>PowerAPI: A Software Library to Monitor the Energy Consumed at the Process-Level: A. Bourdon, A. Noureddine, R. Rouvoy, L. Seinturier. ERCIM News, Special Theme: Smart Energy Systems, 92, pp.43-44. ERCIM, 2013.</li> <li>Mesurer la consommation en \u00e9nergie des logiciels avec pr\u00e9cision: A. Bourdon, R. Rouvoy, L. Seinturier. 01 Business &amp; Technologies, 2013.</li> <li>A review of energy measurement approaches: A. Noureddine, R. Rouvoy, L. Seinturier. ACM SIGOPS Operating Systems Review, ACM, 2013, 47 (3), pp.42-49.</li> <li>Runtime Monitoring of Software Energy Hotspots: A. Noureddine, A. Bourdon, R. Rouvoy, L. Seinturier. International Conference on Automated Software Engineering (ASE), September 2012, Essen, Germany. pp.160-169.</li> <li>A Preliminary Study of the Impact of Software Engineering on GreenIT: A. Noureddine, A. Bourdon, R. Rouvoy, L. Seinturier. International Workshop on Green and Sustainable Software (GREENS), June 2012, Zurich, Switzerland. pp.21-27.</li> </ul>"},{"location":"guides/cgroup/","title":"How to create a cgroup","text":"<p>If you want to monitor a specific process (or group of process), you have to create a cgroup with <code>perf_event</code> controller and add the process you want to monitor to this cgroup.</p> <p>You can easly do this with the following command :</p> <ul> <li>To create the cgroup : <code>cgcreate -g perf_event:new_cgroup_name</code></li> </ul> <p>with <code>new_cgroup_name</code> the name of the cgroup you want to create (this will be the name wich will identify power consumption of you process).</p> <ul> <li>To add your process to the newly created cgroup : <code>cgclassify -g perf_event:new_cgroup_name PID</code></li> </ul> <p>with <code>PID</code>, the pid of the process you want to monitor. If you want to monitor a program composed of many process, replace PID with <code>$(pidof program_name)</code>.</p>"},{"location":"guides/cgroup_v1_activation/","title":"How to active cgroups V1","text":"<p>You can enable cgroups V1 by adding <code>systemd.unified_cgroup_hierarchy=false</code> and <code>systemd.legagy_systemd_cgroup_controller=false</code> as permanent parameters of the kernel. In order to that follow these instructions:</p> <ul> <li> <p>Open the GRUB file: <pre><code>sudo nano /etc/default/grub\n</code></pre></p> </li> <li> <p>Add to <code>GRUB_CMDLINE_LINUX_DEFAULT</code> the two parameters:</p> </li> </ul> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"quit splash systemd.unified_cgroup_hierarchy=false systemd.legagy_systemd_cgroup_controller=false\"\n</code></pre> <ul> <li>Update grub: <pre><code>sudo update-grub\n</code></pre></li> </ul>"},{"location":"guides/reports/","title":"Reports","text":"<p>PowerAPI tools tend to be modular, any sensor could be plugged to any monitoring tool as long as the needed information is provided. We fixed the way of encoding the information. Those encoding are called reports.</p> <p>A report specify the <code>json</code> fields that should be provided to pass information of a certain kind.</p> <p>The type of reports required by each formula are specified in their user guide.</p> <p>All report have a common basis:</p> <ul> <li> <p><code>timestamp</code> : at the format \"year-month-dayThour:minutes:secondes\". The   timestamp should reflect the time at which the information correspond, not the   time the information was computed.   For example if a power consumption of a CPU is mesured at time <code>t</code> and used to   determine the power comsumption of a cgroup in a <code>PowerReport</code>, this report   should have timestamp <code>t</code>.</p> </li> <li> <p><code>target</code> : The target should be the subject of the mesure. For example if     you produce a report that contain information relative to a program,domain,     etc. The target should refer to it.</p> </li> <li> <p><code>sensor</code>: It's a name field that should be use to regroup reports for   computing modules. For example, in VirtualWatts, the computationnal module need to receive a   <code>ProcfsReport</code> and a <code>PowerReport</code>, for both reports to be send to the same   computational module they have to have the same <code>sensor</code>.</p> </li> </ul> <p>A report have the following format:</p> <pre><code>\"timestamp\":$timestamp,\n\"target\":$target,\n\"sensor\":$sensor,\n$report_specific_fields\n</code></pre> <p>In the following parts we specify the <code>$report_specific_fields</code> for each type of report.</p>"},{"location":"guides/reports/#hwpc-report","title":"HWPC Report","text":"<p>A <code>HWPCReport</code> should be used to report perfomance counters and RAPL. It specific fields are the following :</p> <ul> <li><code>groups</code>: A list of subreport that can be of three kind, <code>rapl</code>, <code>core</code> and   <code>msr</code>.</li> </ul> <p>Each are presented the same way</p> <pre><code>{\n$type: {\n$core_number : {\n$socket_number : {\nList of counter and their value\n}\n}\n}\n}\n</code></pre> <p>We provide an example of <code>HWPCReport</code>:</p> <pre><code>{\n\"timestamp\": \"2021-01-13T09:51:22.630\",\n\"sensor\": \"sensor_test\",\n\"target\": \"influxdb\",\n\"groups\": {\n\"core\": {\n\"0\": {\n\"0\": {\n\"CPU_CLK_THREAD_UNHALTED:THREAD_P\": 75510,\n\"CPU_CLK_THREAD_UNHALTED:REF_P\": 2271,\n\"time_enabled\": 167403,\n\"time_running\": 167403,\n\"LLC_MISSES\": 1077,\n\"INSTRUCTIONS_RETIRED\": 31693\n},\n\"1\": {\n\"CPU_CLK_THREAD_UNHALTED:THREAD_P\": 43801,\n\"CPU_CLK_THREAD_UNHALTED:REF_P\": 1318,\n\"time_enabled\": 99324,\n\"time_running\": 99324,\n\"LLC_MISSES\": 750,\n\"INSTRUCTIONS_RETIRED\": 15011\n}\n}\n}\n}\n}\n{\n\"timestamp\" : \"2021-01-13T09:51:22.630\",\n\"sensor\" : \"sensor_test\",\n\"target\" : \"all\",\n\"groups\" : {\n\"rapl\" : {\n\"0\" : {\n\"1\" : {\n\"RAPL_ENERGY_PKG\" : 5709496320,\n\"time_enabled\" : 1006717449,\n\"time_running\" : 1006717449\n}\n}\n},\n\"msr\" : {\n\"0\" : {\n\"0\" : {\n\"MPERF\" : 29646849,\n\"APERF\" : 12319312,\n\"TSC\" : 2122153094,\n\"time_enabled\" : 1006580601,\n\"time_running\" : 1006580601\n},\n\"1\" : {\n\"MPERF\" : 20587012,\n\"APERF\" : 19838920,\n\"TSC\" : 2122185970,\n\"time_enabled\" : 1006560540,\n\"time_running\" : 1006560540\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"guides/reports/#power-report","title":"Power Report","text":"<p>A <code>PowerReport</code> should be used to transfer information about power consumption. It specific fields are the following :</p> <ul> <li><code>power</code>: A power value in Watts</li> </ul> <p>We provide an example of <code>PowerReport</code>:</p> <pre><code>{\n\"timestamp\": \"2021-09-14T12:37:37.168817\",\n\"sensor\": \"formula_group\",\n\"target\": \"all\",\n\"power\": 42\n}\n</code></pre>"},{"location":"guides/reports/#procfs-report","title":"Procfs Report","text":"<p>A <code>ProcfsReport</code> should be used to transfer information about cpu usage of process. It specific fields are the following :</p> <ul> <li><code>global_cpu_usage</code> : The used percentage of the cpu.</li> <li><code>usage</code>: A list of the monitored process with their percentage of cpu usage.</li> </ul> <p>We provide an example of <code>ProcfsReport</code>:</p> <pre><code>{\n\"timestamp\": \"2021-09-14T12:37:37.168817\",\n\"sensor\": \"formula_group\",\n\"target\": [\"firefox_cgroup\", \"emacs_cgroup\", \"zsh_cgroup\", \"mongo_cgroup\"],\n\"usage\": {\n\"firefox_cgroup\": 8.36,\n\"emacs_cgroup\": 5.52,\n\"zsh_cgroup\": 0.01,\n\"mongo_cgroup\": 0.64\n},\n\"global_cpu_usage\": 27.610000000000014\n}\n</code></pre>"},{"location":"sensors/hwpc-sensor/","title":"HWPC Sensor","text":"<p>HardWare Performance Counter (HWPC) Sensor is a tool that monitors the Intel CPU performance counter and the power consumption of CPU.</p> <p>HWPC Sensor uses the RAPL (Running Average Power Limit) technology to monitor CPU power consumption. This technology is only available on Intel Sandy Bridge architecture or higher.</p> <p>The sensor use the <code>perf</code> API of the Linux kernel. It is only available on Linux and need to have root access to be used.</p> <p>The sensor couldn\u2019t be used in a virtual machine, it must access (via Linux kernel API) to the real CPU register to read performance counter values.</p>"},{"location":"sensors/hwpc-sensor/#installation","title":"Installation","text":""},{"location":"sensors/hwpc-sensor/#from-docker","title":"From docker","text":"<p><code>docker pull powerapi/hwpc-sensor</code></p>"},{"location":"sensors/hwpc-sensor/#from-deb-file","title":"From deb file","text":"<p>Download the <code>.deb</code> file from the latest release</p> <p>Install the sensor with <code>sudo apt install hwpc-sensor-1.1.0.deb</code></p>"},{"location":"sensors/hwpc-sensor/#using-the-binary","title":"Using the binary","text":"<p>You can use the compiled version of the sensor (available here)</p>"},{"location":"sensors/hwpc-sensor/#usage","title":"Usage","text":"<p>For running the sensor, first we need a configuration. We provide an example bellow.</p> <pre><code>{\n\"name\": \"sensor\",\n\"verbose\": true,\n\"frequency\": 500,\n\"output\": {\n\"type\": \"mongodb\",\n\"uri\": \"mongodb://127.0.0.1\",\n\"database\": \"db_sensor\",\n\"collection\": \"report_0\"\n},\n\"system\": {\n\"rapl\": {\n\"events\": [\"RAPL_ENERGY_PKG\"],\n\"monitoring_type\": \"MONITOR_ONE_CPU_PER_SOCKET\"\n},\n\"msr\": {\n\"events\": [\"TSC\", \"APERF\", \"MPERF\"]\n}\n},\n\"container\": {\n\"core\": {\n\"events\": [\n\"CPU_CLK_THREAD_UNHALTED:REF_P\",\n\"CPU_CLK_THREAD_UNHALTED:THREAD_P\",\n\"LLC_MISSES\",\n\"INSTRUCTIONS_RETIRED\"\n]\n}\n}\n}\n</code></pre> <p>Start a mongo db and then you can start the sensor with the following command line, depending on your installation :</p> <ul> <li>from docker : <code>docker run --rm --net=host --privileged --pid=host -v /sys:/sys -v /var/lib/docker/containers:/var/lib/docker/containers:ro -v /tmp/powerapi-sensor-reporting:/reporting -v $(pwd):/srv -v $(pwd)/config_file.json:/config_file.json powerapi/hwpc-sensor --config-file /config_file.json</code></li> <li>from binary : <code>./hwpc-sensor --config-file config_file.json</code></li> </ul> <p>The reports will be provided in your mongodb.</p>"},{"location":"sensors/hwpc-sensor/#produced-reports","title":"Produced Reports","text":"<p>The sensor produces <code>HWPCReports</code>. The specific fields of this kind of report are the following :</p> <ul> <li><code>groups</code>: A list of subreports that can be of three kind, <code>rapl</code>, <code>core</code> and   <code>msr</code>.</li> </ul> <p>Each group is defined in the same way</p> <pre><code>{\n$type: {\n$core_number : {\n$socket_number : {\nList of counter and their value\n}\n}\n}\n}\n</code></pre> <p>Below, there is an example of <code>HWPCReport</code>:</p> <pre><code>{\n\"timestamp\": \"2023-01-13T09:51:22.630\",\n\"sensor\": \"sensor_test\",\n\"target\": \"influxdb\",\n\"groups\": {\n\"core\": {\n\"0\": {\n\"0\": {\n\"CPU_CLK_THREAD_UNHALTED:THREAD_P\": 75510,\n\"CPU_CLK_THREAD_UNHALTED:REF_P\": 2271,\n\"time_enabled\": 167403,\n\"time_running\": 167403,\n\"LLC_MISSES\": 1077,\n\"INSTRUCTIONS_RETIRED\": 31693\n},\n\"1\": {\n\"CPU_CLK_THREAD_UNHALTED:THREAD_P\": 43801,\n\"CPU_CLK_THREAD_UNHALTED:REF_P\": 1318,\n\"time_enabled\": 99324,\n\"time_running\": 99324,\n\"LLC_MISSES\": 750,\n\"INSTRUCTIONS_RETIRED\": 15011\n}\n}\n}\n}\n}\n{\n\"timestamp\" : \"2023-01-13T09:51:22.630\",\n\"sensor\" : \"sensor_test\",\n\"target\" : \"all\",\n\"groups\" : {\n\"rapl\" : {\n\"0\" : {\n\"1\" : {\n\"RAPL_ENERGY_PKG\" : 5709496320,\n\"time_enabled\" : 1006717449,\n\"time_running\" : 1006717449\n}\n}\n},\n\"msr\" : {\n\"0\" : {\n\"0\" : {\n\"MPERF\" : 29646849,\n\"APERF\" : 12319312,\n\"TSC\" : 2122153094,\n\"time_enabled\" : 1006580601,\n\"time_running\" : 1006580601\n},\n\"1\" : {\n\"MPERF\" : 20587012,\n\"APERF\" : 19838920,\n\"TSC\" : 2122185970,\n\"time_enabled\" : 1006560540,\n\"time_running\" : 1006560540\n}\n}\n}\n}\n}\n</code></pre> Info <p>You can have more insights about general Reports' structure here</p>"}]}